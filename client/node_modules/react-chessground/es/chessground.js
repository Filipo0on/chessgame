var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import { Chessground as NativeChessground } from 'chessground';

var Chessground = function (_React$Component) {
  _inherits(Chessground, _React$Component);

  function Chessground() {
    _classCallCheck(this, Chessground);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Chessground.prototype.buildConfigFromProps = function buildConfigFromProps(props) {
    var config = { events: {} };
    Object.keys(Chessground.propTypes).forEach(function (k) {
      var v = props[k];
      if (v) {
        var match = k.match(/^on([A-Z]\S*)/);
        if (match) {
          config.events[match[1].toLowerCase()] = v;
        } else {
          config[k] = v;
        }
      }
    });
    return config;
  };

  Chessground.prototype.componentDidMount = function componentDidMount() {
    this.cg = NativeChessground(this.el, this.buildConfigFromProps(this.props));
  };

  Chessground.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.cg.set(this.buildConfigFromProps(nextProps));
  };

  Chessground.prototype.componentWillUnmount = function componentWillUnmount() {
    this.cg.destroy();
  };

  Chessground.prototype.render = function render() {
    var _this2 = this;

    var props = { style: _extends({}, this.props.style) };
    if (this.props.width) {
      props.style.width = this.props.width;
    }
    if (this.props.height) {
      props.style.height = this.props.height;
    }
    return React.createElement('div', _extends({ ref: function ref(el) {
        return _this2.el = el;
      } }, props));
  };

  return Chessground;
}(React.Component);

Chessground.propTypes = {
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fen: PropTypes.string,
  orientation: PropTypes.string,
  turnColor: PropTypes.string,
  check: PropTypes.string,
  lastMove: PropTypes.array,
  selected: PropTypes.string,
  coordinates: PropTypes.bool,
  autoCastle: PropTypes.bool,
  viewOnly: PropTypes.bool,
  disableContextMenu: PropTypes.bool,
  resizable: PropTypes.bool,
  addPieceZIndex: PropTypes.bool,
  hightlight: PropTypes.object,
  animation: PropTypes.object,
  movable: PropTypes.object,
  premovable: PropTypes.object,
  predroppable: PropTypes.object,
  draggable: PropTypes.object,
  selectable: PropTypes.object,
  onChange: PropTypes.func,
  onMove: PropTypes.func,
  onDropNewPiece: PropTypes.func,
  onSelect: PropTypes.func,
  items: PropTypes.object,
  drawable: PropTypes.object
};
Chessground.defaultProps = {
  coordinates: true,
  resizable: true,
  hightlight: {
    lastMove: true,
    check: true
  }
};
export default Chessground;